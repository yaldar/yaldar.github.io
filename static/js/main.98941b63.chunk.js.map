{"version":3,"sources":["components/NavbarLink/NavbarLink.tsx","components/Navbar/Navbar.tsx","pages/Header/Header.tsx","components/Intro/Intro.tsx","pages/About/About.tsx","pages/Footer/Footer.tsx","components/SkillList/SkillList.tsx","pages/Skills/Skills.tsx","utils/index.ts","pages/Projects/Projects.tsx","data/skillsObject.tsx","data/pastExp.tsx","pages/Experience/Experience.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/profile.jpg"],"names":["NavbarLink","to","toLocaleLowerCase","activeClass","spy","smooth","offset","duration","Navbar","useState","collapsed","setCollapsed","className","id","Icon","name","onClick","prev","size","Header","Intro","src","profile","alt","About","href","target","Footer","SkillList","title","list","map","el","i","key","Skills","languages","backend","frontend","tools","formateDate","window","pageYOffset","gitHubDate","year","substring","monthName","monthNum","parseInt","getMonthName","Projects","projects","setProjects","useEffect","fetch","then","res","json","arr","filter","project","fork","unsorted","sort","a","b","created_at","Card","html_url","header","meta","description","skills","timeRange","desc","Experience","pastExp","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.98941b63.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-scroll';\n\nconst NavbarLink = ({ to }: { to: string }) => {\n\n  return (\n    <Link\n      to={to.toLocaleLowerCase()}\n      activeClass=\"active\"\n      spy={true}\n      smooth={true}\n      offset={-70}\n      duration={500}\n    >\n      {to}\n    </Link>\n  );\n};\n\nexport default NavbarLink;\n","import React, { useState } from 'react';\nimport { Icon } from 'semantic-ui-react';\nimport NavbarLink from '../NavbarLink/NavbarLink';\nimport './Navbar.css';\n\nconst Navbar = () => {\n  const [collapsed, setCollapsed] = useState(false);\n  const toggleCollapsed = () => setCollapsed((prev) => !prev);\n\n  return (\n    <nav className={`navbar ${collapsed ? 'collapsed' : ''}`} id=\"navbar\">\n      <Icon name=\"bars\" className=\"icon\" onClick={toggleCollapsed} size=\"big\" />\n      <NavbarLink to=\"About\" />\n      <NavbarLink to=\"Experience\" />\n      <NavbarLink to=\"Skills\" />\n      <NavbarLink to=\"Projects\" />\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from 'react';\nimport Navbar from '../../components/Navbar/Navbar';\n\nconst Header = () => {\n  return (\n    <header className=\"header\">\n      <Navbar />\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport './Intro.css';\nimport profile from '../../assets/profile.jpg';\n\nconst Intro = () => (\n  <div className=\"intro\">\n    <h1>Hi! My name is Yaldar</h1>\n    <img src={profile} alt=\"me\" className=\"profile-pic\" />\n  </div>\n);\n\nexport default Intro;\n","import React from 'react';\nimport { Divider, Icon } from 'semantic-ui-react';\nimport Intro from '../../components/Intro/Intro';\nimport './About.css';\n\nconst About = () => (\n  <div className=\"about\" id=\"about\">\n    <Intro />\n    <p>\n      Iâ€™m an ambitious, 27 year-old\n      {' '}\n      {'<'}\n      /salt\n      {'>'}\n      {' '}\n      graduate with a passion\n      for programming currently living in Stockholm. Learning new technologies\n      and concepts and helping others develop is something I really enjoy, as\n      well making tools and building amazing software that makes life easier\n      for others. I used to work as a personal technician but now want to get\n      involved more with software as it is my true passion.\n    </p>\n\n    <hr />\n    <div className=\"about-links\">\n      <a href=\"https://github.com/yaldar\" target=\"blank\">\n        <Icon name=\"github\" size=\"huge\" />\n      </a>\n\n      <a href=\"https://www.linkedin.com/in/yaldar-hapak/\" target=\"blank\">\n        <Icon name=\"linkedin\" size=\"huge\" />\n      </a>\n      <a href=\"mailto:yaldar.hapak@gmail.com\" target=\"blank\">\n        <Icon name=\"mail\" size=\"huge\" />\n      </a>\n    </div>\n  </div>\n);\n\nexport default About;\n","import React from 'react';\n\nimport './Footer.css';\n\nconst Footer = () => {\n  return (\n    <footer className=\"footer\">\n\n\n    </footer>\n  );\n};\n\nexport default Footer;\n","/* eslint-disable react/no-array-index-key */\n// @ts-nocheck\nimport React from 'react';\nimport { Icon } from 'semantic-ui-react';\nimport { SkillListType } from '../../types';\nimport './SkillList.css';\n\nconst SkillList = ({ title, list }: SkillListType) => (\n  <ul className={`${title} skill-list`}>\n    <h2>{title}</h2>\n    {list.map((el, i) => (\n      <li key={i}>{el}</li>\n    ))}\n  </ul>\n);\n\nexport default SkillList;\n","import React from 'react';\nimport SkillList from '../../components/SkillList/SkillList';\nimport './Skills.css'\ntype skillsObject = {\n  languages: string[];\n  backend: string[];\n  frontend: string[];\n  tools: string[];\n};\n\nconst Skills = ({ languages, backend, frontend, tools }: skillsObject) => {\n  return (\n    <div className=\"skills-wrapper\" id=\"skills\">\n      <SkillList title=\"languages\" list={languages}/>\n      <SkillList title=\"backend\" list={backend} />\n      <SkillList title=\"frontend\" list={frontend} />\n      <SkillList title=\"tools\" list={tools} />\n    </div>\n  );\n};\n\nexport default Skills;\n","import { resType } from '../types/index';\n\nlet prevScrollpos = window.pageYOffset;\nconst scrollHandler = () => {\n  const currentScrollPos = window.pageYOffset;\n  const navbar = document.getElementById('navbar');\n  const height = document.getElementById('navbar')!.clientHeight;\n\n  if (prevScrollpos >= currentScrollPos) {\n    navbar!.style.top = '0';\n  } else {\n    navbar!.style.top = `-${height}px`;\n  }\n  prevScrollpos = currentScrollPos;\n};\n\nconst fetchProjects = () => fetch('https://api.github.com/users/yaldar/repos')\n  .then((res) => res.json())\n  .then((arr: resType[]) => arr.filter((project: any) => !project.fork))\n  .then((unsorted) => unsorted.sort((a, b) => (a.created_at < b.created_at ? 1 : -1)));\n\nconst getMonthName = (monthNum: string) => {\n  const monthArray = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'November',\n    'December',\n  ];\n  return monthArray[parseInt(monthNum, 10)];\n};\n\nconst formateDate = (gitHubDate: string) => {\n  const year = gitHubDate.substring(0, 4);\n  const monthNum = gitHubDate.substring(5, 7);\n  const monthName = getMonthName(monthNum);\n\n  return `${monthName} ${year}`;\n};\n\nexport { scrollHandler, fetchProjects, formateDate };\n","import React, { useEffect, useState } from 'react';\nimport { Card } from 'semantic-ui-react';\nimport { fetchProjects, formateDate } from '../../utils';\nimport { resType } from '../../types/index';\nimport './Projects.css';\n\nconst Projects = () => {\n  const [projects, setProjects] = useState<resType[]>([]);\n\n  useEffect(() => {\n    fetchProjects().then(setProjects);\n  }, []);\n\n  return (\n    <div className=\"projects-wrapper\" id=\"projects\">\n      <h2>My projects:</h2>\n      <div className=\"projects-list\">\n        {projects.map((project) => (\n          <Card\n            href={project.html_url}\n            target=\"blank\"\n            header={project.name}\n            meta={formateDate(project.created_at)}\n            description={project.description}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Projects;\n","const skills = {\n  languages: ['java', 'javascript', 'typescript'],\n  backend: ['node', 'express.js', 'MongoDB', 'SQL'],\n  frontend: ['React', 'Redux', 'Bootstrap', 'CSS3', 'HTML5'],\n  tools: ['jest', 'git', 'docker', 'npm'],\n};\n\nexport default skills;\n","export default [\n  {\n    title: 'Full Stack JavaScript - School of Applied Technology </salt>',\n    timeRange: 'Apr 2020 - Jul 2020',\n    desc:\n      'Intensive three month training program for full stack web development with a focus on TDD, mob programming, and applied learning.',\n  },\n  {\n    title: 'Information and Communication technology - KTH',\n    timeRange: 'Aug 2017 - on hold',\n    desc:\n      'Bachelors program taught in English. The program includes a wide array of both software and hardware courses, as well as basic to advanced math thatâ€™s required of a software engineer. Core courses include: Java, Algorithms and data structures, Functional programming, Mobile software development, Algebra and Calculus.',\n  },\n  {\n    title: 'Personal technician â€“ TechBuddy AB, Stockholm',\n    timeRange: 'Jun 2018 - Mar 2020',\n    desc:\n      'Performed over 60 tasks as a personal technician. The job role required contacting the customers to get an understanding of the issue and then booking a time to visit the customer and solve the problem.',\n  },\n];\n","import React from 'react';\nimport './Experience.css';\nimport pastExp from '../../data/pastExp';\n\nconst Experience = () => {\n  return (\n    <ul className=\"exp-wrapper\" id=\"experience\">\n      <h4>Past experience:</h4>\n      {pastExp.map((el, i) => (\n        <li key={i}>\n          <h5>{el.title}</h5>\n          <p>{el.timeRange}</p>\n          <p>{el.desc}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default Experience;\n","import React from 'react';\nimport Header from './pages/Header/Header';\nimport About from './pages/About/About';\nimport Footer from './pages/Footer/Footer';\nimport { BrowserRouter } from 'react-router-dom';\nimport Intro from './components/Intro/Intro';\nimport Skills from './pages/Skills/Skills';\nimport Projects from './pages/Projects/Projects';\nimport skills from './data/skillsObject';\nimport Experience from './pages/Experience/Experience';\nimport 'semantic-ui-css/semantic.min.css';\n\nconst App = () => (\n  <BrowserRouter>\n    <div className=\"App\">\n      <Header />\n      <About />\n      <Experience />\n      <Skills {...skills} />\n      <Projects />\n      <Footer />\n    </div>\n  </BrowserRouter>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/profile.7002cba5.jpg\";"],"sourceRoot":""}