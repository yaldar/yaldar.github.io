{"version":3,"sources":["components/NavbarLink/NavbarLink.tsx","components/Navbar/Navbar.tsx","pages/Header/Header.tsx","components/Intro/Intro.tsx","pages/About/About.tsx","pages/Footer/Footer.tsx","components/SkillList/SkillList.tsx","pages/Skills/Skills.tsx","utils/index.ts","pages/Projects/Projects.tsx","data/skillsObject.tsx","data/pastExp.tsx","pages/Experience/Experience.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/profile.jpg"],"names":["NavbarLink","to","toLocaleLowerCase","activeClass","spy","smooth","offset","duration","className","Navbar","useState","expanded","setExpanded","r","useRef","collapseOnScroll","collapseOnClick","e","target","id","useEffect","document","addEventListener","removeEventListener","Icon","name","onClick","prev","size","ref","Header","Intro","props","useSpring","margin","from","config","div","style","src","profile","alt","About","href","Footer","SkillList","title","list","map","el","i","key","Skills","languages","backend","frontend","tools","formateDate","window","pageYOffset","gitHubDate","year","substring","monthName","monthNum","parseInt","getMonthName","Projects","projects","setProjects","fetch","then","res","json","arr","filter","project","fork","unsorted","sort","a","b","created_at","Card","fluid","color","html_url","header","meta","description","skills","timeRange","desc","Experience","pastExp","Content","Meta","Description","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.cdb92419.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-scroll';\nimport './NavbarLink.css';\n\nconst NavbarLink = ({ to }: { to: string }) => (\n  <Link to={to.toLocaleLowerCase()} activeClass=\"active\" spy smooth offset={-70} duration={500} className=\"link\">\n    {to}\n  </Link>\n);\n\nexport default NavbarLink;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Icon } from 'semantic-ui-react';\nimport NavbarLink from '../NavbarLink/NavbarLink';\nimport './Navbar.css';\n\nconst Navbar = () => {\n  const [expanded, setExpanded] = useState(false);\n  const toggleExpanded = () => setExpanded((prev) => !prev);\n  const r = useRef<Icon>(null);\n  const collapseOnScroll = () => {\n    setExpanded(false);\n  };\n  const collapseOnClick = (e: MouseEvent) => {\n    const target = e.target as HTMLElement;\n    if (target.id && target.id !== 'icon') setExpanded(false);\n  };\n\n  useEffect(() => {\n    document.addEventListener('scroll', collapseOnScroll);\n    document.addEventListener('click', collapseOnClick);\n    return () => {\n      document.removeEventListener('scroll', collapseOnScroll);\n      document.removeEventListener('click', collapseOnClick);\n    };\n  }, []);\n  return (\n    <nav className={`navbar ${expanded ? 'expanded' : ''}`} id=\"navbar\">\n      <Icon name=\"bars\" className=\"icon\" onClick={toggleExpanded} size=\"big\" ref={r} />\n      <NavbarLink to=\"About\" />\n      <NavbarLink to=\"Experience\" />\n      <NavbarLink to=\"Skills\" />\n      <NavbarLink to=\"Projects\" />\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from 'react';\nimport Navbar from '../../components/Navbar/Navbar';\n\nconst Header = () => {\n  return (\n    <header className=\"header\">\n      <Navbar />\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport './Intro.css';\nimport { useSpring, animated } from 'react-spring';\n\nimport profile from '../../assets/profile.jpg';\n\nconst Intro = () => {\n  const props = useSpring({\n    margin: '0',\n    from: { margin: '300px' },\n    config: { duration: 550 },\n  });\n\n  return (\n    <animated.div style={props}>\n      <div className=\"intro\">\n        <h1>Hi! My name is Yaldar</h1>\n\n        <img src={profile} alt=\"me\" className=\"profile-pic\" />\n      </div>\n    </animated.div>\n  );\n};\n\nexport default Intro;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { Icon } from 'semantic-ui-react';\nimport Intro from '../../components/Intro/Intro';\nimport './About.css';\n\nconst About = () => (\n  <div className=\"about\" id=\"about\">\n    <Intro />\n    <p className=\"about-text\">\n      Iâ€™m an ambitious, 27 year-old\n      {' '}\n      {'<'}\n      /salt\n      {'>'}\n      {' '}\n      graduate with a passion for programming currently living in Stockholm. Learning new technologies and\n      concepts and helping others develop is something I really enjoy, as well making tools and building amazing\n      software that makes life easier for others. I used to work as a personal technician but now want to get involved\n      more with software as it is my true passion.\n    </p>\n\n    <hr />\n    <div className=\"about-links\">\n      <a href=\"https://github.com/yaldar\" target=\"blank\">\n        <Icon name=\"github\" size=\"huge\" />\n      </a>\n\n      <a href=\"https://www.linkedin.com/in/yaldar-hapak/\" target=\"blank\">\n        <Icon name=\"linkedin\" size=\"huge\" />\n      </a>\n      <a href=\"mailto:yaldar.hapak@gmail.com\" target=\"blank\">\n        <Icon name=\"mail\" size=\"huge\" />\n      </a>\n    </div>\n  </div>\n);\n\nexport default About;\n","import React from 'react';\n\nimport './Footer.css';\n\nconst Footer = () => {\n  return (\n    <footer className=\"footer\">\n\n\n    </footer>\n  );\n};\n\nexport default Footer;\n","/* eslint-disable react/no-array-index-key */\n// @ts-nocheck\nimport React from 'react';\nimport { SkillListType } from '../../types';\nimport './SkillList.css';\n\nconst SkillList = ({ title, list }: SkillListType) => (\n  <ul className={`${title} skill-list`}>\n    <h3>{title}</h3>\n    {list.map((el, i) => (\n      <li key={i}>{el}</li>\n    ))}\n  </ul>\n);\n\nexport default SkillList;\n","import React from 'react';\n\nimport SkillList from '../../components/SkillList/SkillList';\nimport './Skills.css';\n\ntype skillsObject = {\n  languages: string[];\n  backend: string[];\n  frontend: string[];\n  tools: string[];\n};\n\nconst Skills = ({\n  languages, backend, frontend, tools,\n}: skillsObject) => (\n  <div className=\"centered-wrapper\">\n    <h2>Skills and Technologies: </h2>\n    <div className=\"skills-wrapper\" id=\"skills\">\n      <SkillList title=\"Languages\" list={languages} />\n      <SkillList title=\"Backend\" list={backend} />\n      <SkillList title=\"Frontend\" list={frontend} />\n      <SkillList title=\"Tools\" list={tools} />\n    </div>\n\n  </div>\n);\n\nexport default Skills;\n","import { resType } from '../types/index';\n\nlet prevScrollpos = window.pageYOffset;\nconst scrollHandler = () => {\n  const currentScrollPos = window.pageYOffset;\n  const navbar = document.getElementById('navbar');\n  const height = document.getElementById('navbar')!.clientHeight;\n\n  if (prevScrollpos >= currentScrollPos) {\n    navbar!.style.top = '0';\n  } else {\n    navbar!.style.top = `-${height}px`;\n  }\n  prevScrollpos = currentScrollPos;\n};\n\nconst fetchProjects = () => fetch('https://api.github.com/users/yaldar/repos')\n  .then((res) => res.json())\n  .then((arr: resType[]) => arr.filter((project: any) => !project.fork))\n  .then((unsorted) => unsorted.sort((a, b) => (a.created_at < b.created_at ? 1 : -1)));\n\nconst getMonthName = (monthNum: string) => {\n  const monthArray = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n  return monthArray[parseInt(monthNum, 10) - 1];\n};\n\nconst formateDate = (gitHubDate: string) => {\n  const year = gitHubDate.substring(0, 4);\n  const monthNum = gitHubDate.substring(5, 7);\n  const monthName = getMonthName(monthNum);\n\n  return `${monthName} ${year}`;\n};\n\nexport { scrollHandler, fetchProjects, formateDate };\n","import React, { useEffect, useState } from 'react';\nimport { Card } from 'semantic-ui-react';\nimport { fetchProjects, formateDate } from '../../utils';\nimport { resType } from '../../types/index';\nimport './Projects.css';\n\nconst Projects = () => {\n  const [projects, setProjects] = useState<resType[]>([]);\n\n  useEffect(() => {\n    fetchProjects().then(setProjects);\n  }, []);\n\n  return (\n    <div className=\"projects-wrapper\" id=\"projects\">\n      <h2>My projects:</h2>\n      <div className=\"projects-list\">\n        {projects.map((project) => (\n          <Card\n            fluid\n            color=\"yellow\"\n            className=\"card\"\n            href={project.html_url}\n            target=\"blank\"\n            header={project.name}\n            meta={formateDate(project.created_at)}\n            description={project.description}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Projects;\n","const skills = {\n  languages: ['Java', 'Javascript', 'Typescript'],\n  backend: ['Node.js', 'Express.js', 'MongoDB', 'SQL', 'HTTP/JSON/AJAX', 'REST'],\n  frontend: ['React', 'Redux', 'CSS/SASS/Styled-components', 'HTML5', 'jQuery/Bootstrap'],\n  tools: ['Mocha/Jest', 'git', 'Docker', 'npm', 'Handlebars/Pug', 'TDD'],\n};\n\nexport default skills;\n","export default [\n  {\n    title: 'Full Stack JavaScript - School of Applied Technology </salt>',\n    timeRange: 'Apr 2020 - Jul 2020',\n    desc:\n      'Intensive three month training program for full stack web development with a focus on TDD, mob programming, and applied learning.',\n  },\n  {\n    title: 'Information and Communication technology - KTH',\n    timeRange: 'Aug 2017 - on hold',\n    desc:\n      'Bachelors program taught in English. The program includes a wide array of both software and hardware courses, as well as basic to advanced math thatâ€™s required of a software engineer. Core courses include: Java, Algorithms and data structures, Functional programming, Mobile software development, Algebra and Calculus.',\n  },\n  {\n    title: 'Personal technician â€“ TechBuddy AB, Stockholm',\n    timeRange: 'Jun 2018 - Mar 2020',\n    desc:\n      'Performed over 60 tasks as a personal technician. The job role required contacting the customers to get an understanding of the issue and then booking a time to visit the customer and solve the problem.',\n  },\n];\n","import React from 'react';\nimport './Experience.css';\nimport { Card } from 'semantic-ui-react';\nimport pastExp from '../../data/pastExp';\n\nconst Experience = () => (\n  <div className=\"exp-wrapper\" id=\"experience\">\n    <h3>My past experience and education:</h3>\n    <div className=\"exp-list\">\n      {pastExp.map((el, i) => (\n        <Card fluid>\n          <Card.Content>\n            <Card.Header>{el.title}</Card.Header>\n            <Card.Meta>\n              <span className=\"date\">{el.timeRange}</span>\n            </Card.Meta>\n            <Card.Description>{el.desc}</Card.Description>\n          </Card.Content>\n\n        </Card>\n      ))}\n    </div>\n  </div>\n);\n\nexport default Experience;\n\n/*\n\n  <a>\n    <Icon name='user' />\n    22 Friends\n  </a>\n*/\n","import React from 'react';\nimport Header from './pages/Header/Header';\nimport About from './pages/About/About';\nimport Footer from './pages/Footer/Footer';\nimport { BrowserRouter } from 'react-router-dom';\nimport Intro from './components/Intro/Intro';\nimport Skills from './pages/Skills/Skills';\nimport Projects from './pages/Projects/Projects';\nimport skills from './data/skillsObject';\nimport Experience from './pages/Experience/Experience';\nimport 'semantic-ui-css/semantic.min.css';\n\nconst App = () => (\n  <BrowserRouter>\n    <div className=\"App\">\n      <Header />\n      <About />\n      <Experience />\n      <Skills {...skills} />\n      <Projects />\n      <Footer />\n    </div>\n  </BrowserRouter>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/profile.7002cba5.jpg\";"],"sourceRoot":""}